import maya.cmds as cmds

# 팔꿈치에서 손목까지 등의 길이를 distance로 알아낸 뒤 그 길이에 맞는 nurbsPlane을 만드는 방법

## nurbsPlane을 만드는 코드 (이때 w는 distance값, lr은 리본 폭 나누기 distance값 (42.7022/0.5))
cmds.nurbsPlane(p=(0, 0, 0), ax=(0, 0, 1), w=42.7022, lr=0.0117089986, d=3, u=6, v=1, ch=0, name='leg_do_nurbsPlane_L')

cmds.nurbsPlane(p=(0, 0, 0), ax=(0, 0, 1), w=42.7022, lr=0.0117089986, d=3, u=6, v=1, ch=0, name='leg_do_nurbsPlane_R')

cmds.select(cl=1)

## 만든 unrbsPlane을 그룹짓고 _pos를 붙이는 코드

# _pos를 붙이는 함수 생성
def group_pos(object_name):
    return f"{object_name}_pos"

# nurbsPlane 이름을 변수로 지정
object_name='leg_do_nurbsPlane_L'

# 변수를 집어넣고 그룹을 만들겠다는 뜻
cmds.group(object_name, n=group_pos(object_name))

# 오른쪽 nurbsPlane 이름을 변수로 재지정
object_name='leg_do_nurbsPlane_R'

cmds.group(object_name, n=group_pos(object_name))

# leg_do_nurbsPlane_L 선택
# 손수 follicle 만들기
# nhair 만들면 생기는 hairSystem()Follicle 그룹 제외하고 전부 지우기
# leg_do_nurbsPlane_R 선택
# 손수 follicle 만들기
# nhair 만들면 생기는 hairSystem()Follicle 그룹 제외하고 전부 지우기
# hairSystem()Follicle 그룹 하위에있는 follicle, 그 하위에있는 curve 로 시작하는 그룹 전부 지우기

## 0, 0, 0 위치에 조인트 여러개 생성하는 코드 (parent 안된상태로)

import maya.cmds as cmds

cmds.select(cl=1)

# 조인트 이름 패턴 생성 및 반복문으로 조인트 생성
# 왼쪽 조인트 생성
for i in range(1, 8):  # 1부터 7까지 반복
    name = f"leg_do_folliclejoint{i}_L"  # f-string으로 이름 생성
    cmds.joint(n=name)
    cmds.select(cl=1)  # 선택 해제

# 오른쪽 조인트 생성
for i in range(1, 8):  # 1부터 7까지 반복
    name = f"leg_do_folliclejoint{i}_R"  # f-string으로 이름 생성
    cmds.joint(n=name)
    cmds.select(cl=1)  # 선택 해제

## 조인트들을 follicle 안으로 각각 parent 시키는 코드
# # 정확한 follicle 번호 리스트
follicle_numbers = [50, 1750, 3350, 5050, 6650, 8350, 9950]

# 반복문으로 parent 작업 수행
# 왼쪽 작업
for i, follicle in enumerate(follicle_numbers, start=1):
    cmds.parent(f"leg_do_folliclejoint{i}_L", f"leg_do_nurbsPlane_LFollicle{follicle}")

# 오른쪽 작업
for i, follicle in enumerate(follicle_numbers, start=1):
    cmds.parent(f"leg_do_folliclejoint{i}_R", f"leg_do_nurbsPlane_RFollicle{follicle}")

## 폴리클 안에 넣은 조인트들을 0, 0, 0, 0, 0, 0 로 바꾸는 코드

cmds.select(cl=1)

# L과 R, 1부터 7까지 조합
for side in ['L', 'R']:  # L, R 한번씩 대입
    for i in range(1, 8):  # 1부터 7까지
        obj_name = f"leg_do_folliclejoint{i}_{side}"
        for axis in ['X', 'Y', 'Z']:  # X, Y, Z 한번씩
            cmds.setAttr(f"{obj_name}.translate{axis}", 0)
            cmds.setAttr(f"{obj_name}.rotate{axis}", 0)
            
# 2(L, R 방향)*7(조인트 수)*3(X, Y, Z)*2(translate, rotate)=84 총 84개의 명령 처리

## 제 위치로 이동한 조인트들을 포지션값을 유지할 pos 그룹짓는 코드

cmds.select(cl=1)

def group_pos(object_name):
    return f"{object_name}_pos"

for side in ['L', 'R']:  # L, R 한번씩 대입
    for i in range(1, 8):  # 1부터 7까지
        object_name = f"leg_do_folliclejoint{i}_{side}"
        cmds.group(object_name, n=group_pos(object_name))

## maintain offset=False인 point constrain 과 orient constrain을 이용해 리본_pos 그룹을 정확한 위치에 가져다두는 코드

cmds.select(cl=1)

#왼쪽 작업
object_name='leg_do_nurbsPlane_L'

# 무릎과 발목 사이로 위치 이동 (point constrain 활용)
poi_con_no = cmds.pointConstraint('JNT_L_knee_loc', 'JNT_L_foot_loc', group_pos(object_name), mo=False, weight=1)

cmds.select(cl=1)

# 무릎 회전값과 같은 값으로 회전 (orient constrain 활용)
ori_con_no = cmds.orientConstraint('JNT_L_knee_loc', group_pos(object_name), mo=False, weight=1)

#만든 constrain 노드들 제거
cmds.delete(poi_con_no, ori_con_no)

cmds.select(cl=1)

# 오른쪽 작업
object_name='leg_do_nurbsPlane_R'

poi_con_no = cmds.pointConstraint('JNT_R_knee_loc', 'JNT_R_foot_loc', group_pos(object_name), mo=False, weight=1)

cmds.select(cl=1)

ori_con_no = cmds.orientConstraint('JNT_R_knee_loc', group_pos(object_name), mo=False, weight=1)

cmds.delete(poi_con_no, ori_con_no)

## 그냥 로테이트값 잡으면 리본이 뒤집어져있기 때문에 바로잡기 위해 왼쪽리본의 rotate Y, Z 값을 가져와서 -1 을 곱한 후 오른쪽리본에 넣어주는코드
cmds.select(cl=1)

object_name=f'leg_do_nurbsPlane_L'
object_name2=f'leg_do_nurbsPlane_R'

# object_name의 rotateY와 rotateZ 값을 가져옴
rotateY_A = cmds.getAttr(f'{group_pos(object_name)}.rotateY')
rotateZ_A = cmds.getAttr(f'{group_pos(object_name)}.rotateZ')

# object_name2의 rotateY와 rotateZ를 object_name에서 반전된 값으로 설정
cmds.setAttr(f'{group_pos(object_name2)}.rotateY', -1 * rotateY_A)
cmds.setAttr(f'{group_pos(object_name2)}.rotateZ', -1 * rotateZ_A)

## follicle 안에있는 그룹들을 복제해서 hairSystem()Follicles 안에 넣고 복제하면서 생긴 이름 마지막의 1을 지운 후 _L_pos 를 _L_rb_pos로 rename하고 그 하위에있는 조인트도 끝에 _rb를 붙여 rename한다

cmds.select(cl=1)

# 왼쪽 작업
# L_pos로 끝나는 오브젝트를 자동으로 생성
for i in range(1, 8):
    
    # 오브젝트 복제
    duplicated_obj = cmds.duplicate(f'leg_do_folliclejoint{i}_L_pos')[0]  # 복제된 첫 번째 오브젝트 선택
    
    # 부모 오브젝트에 parent로 설정
    cmds.parent(duplicated_obj, 'hairSystem3Follicles')
    
    # 부모 오브젝트 이름 변경
    renamed_parent = cmds.rename(duplicated_obj, (duplicated_obj.replace('L_pos1', 'L_rb_pos')))
    
    # 부모 이름이 변경된 후, 자식들도 이름 변경
    # listRelatives 명령어를 통해 renamed_parent의 children들 이름을 구하고 이를 child 변수에 전체반환한다
    # renamed_parent = 메인개체 children = 자식을 구할거다 fullpath = 이름만 가져오고싶은게 아니라 경로도 같이 가져올거다 이때 가져오는값은 | 로 나뉘어있음
    for child in cmds.listRelatives(renamed_parent, children=True, fullPath=True) or []:

        # 여기서 split('|')은 전체반환한 child 항목중 | 를 기준으로 분리해 리스트화 한다는 뜻
        # 그 리스트중 가장 마지막에 있는 개체의 이름에 _rb 를 붙여 rename 하는 코드
        cmds.rename(child, (f"{child.split('|')[-1]}_rb"))

cmds.select(cl=1)

# 오른쪽 작업
for i in range(1, 8):
    
    duplicated_obj = cmds.duplicate(f'leg_do_folliclejoint{i}_R_pos')[0] 
    
    cmds.parent(duplicated_obj, 'hairSystem4Follicles')
    
    renamed_parent = cmds.rename(duplicated_obj, (duplicated_obj.replace('R_pos1', 'R_rb_pos')))

    for child in cmds.listRelatives(renamed_parent, children=True, fullPath=True) or []:

        cmds.rename(child, (f"{child.split('|')[-1]}_rb"))

## 복제된 조인트들상위에 constrain용 그룹 2개 생성하고 rename

cmds.select(cl=1)

# 그룹 이름 뒤에 _con 붙여주는 함수 생성
def group_con(object_name):
    return f"{object_name}_con"

# 그룹 이름 뒤에 _par 붙여주는 함수 생성
def group_par(object_name):
    return f"{object_name}_par"

for side in ['L', 'R']:
    for i in range(1, 8):
        object_name = f"leg_do_folliclejoint{i}_{side}_rb"

        cmds.group(object_name, n=group_par(object_name))

        cmds.group(object_name, n=group_con(object_name))

## 트위스트 컨트롤러 만들고 제위치에 갖다두는 코드

# 그냥 함수로 만들어도 되지만 컨스트레인들을 맞추고 다시 지워야하기때문에 반환이 필요해서 return 사용
def poi_con0_2(parent_1, parent_2, child, weight):
    return cmds.pointConstraint(parent_1, parent_2, child, mo=False, weight=weight)

def poi_con0_2_R(parent_2, parent_1, child, weight):
    return cmds.pointConstraint(parent_1, parent_2, child, mo=False, weight=weight)

def ori_con0(parent, child, weight):
    return cmds.orientConstraint(parent, child, mo=False, weight=weight)

def ori_con1(parent, child, weight):
    return cmds.orientConstraint(parent, child, mo=True, weight=weight)

def par_con1(parent, child, weight):
    return cmds.parentConstraint(parent, child, mo=True, weight=weight)

#왼쪽 작업
side = 'L'

cmds.select(cl=1)

# 변수에 컨트롤러 이름 지정
ctl_name = f'leg_do_twist2_{side}_bind_ctl'

# 지금 10이고 히스토리값 안남기고 이름은 ctl_name 인 원형 커브 생성
cmds.circle(r=10, ch=0, n=ctl_name)

# 커브 위에 컨스트레인 셋드리븐 등 만들어줄 빈그룹 4개 생성
cmds.group(ctl_name, n=group_pos(ctl_name))
cmds.group(ctl_name, n=group_par(ctl_name))
cmds.group(ctl_name, n=f"{ctl_name}_rotkn")
cmds.group(ctl_name, n=f"{ctl_name}_rotfo")

# 맨 위 pos 그룹 포인트와 오리엔트 컨스트레인을 사용해 제위치에 가져다두기
poi_con_no = poi_con0_2(f'JNT_{side}_knee_loc', f'JNT_{side}_foot_loc', group_pos(ctl_name), 1)

ori_con_no = ori_con0(f'JNT_{side}_knee_loc', group_pos(ctl_name), 1)

# 필요없어진 코드들 지우기
cmds.delete(poi_con_no, ori_con_no)

# 컨트롤러를 항상 무릎과 발목 사이에 위치시키는 point constrain
poi_con0_2(f'JNT_{side}_knee_loc', f'JNT_{side}_foot_loc', group_par(ctl_name), 1)

# 컨트롤러의 회전축이 항상 무릎을 바라보게 만드는 aim constrain
cmds.aimConstraint(
    f'JNT_{side}_knee_loc',  # 타겟 오브젝트
    group_par(ctl_name),  # 제약 대상 오브젝트
    mo=True,  # 유지 모드 (Maintain Offset)
    weight=1,  # 가중치
    aimVector=(-1, 0, 0),  # Aim 벡터
    upVector=(0, 1, 0),  # Up 벡터
    worldUpType="vector",  # World Up 타입
    worldUpVector=(0, 1, 0)  # World Up 벡터
)

# 오른쪽 작업
side = 'R'

cmds.select(cl=1)

ctl_name = f'leg_do_twist2_{side}_bind_ctl'

cmds.circle(r=10, ch=0, n=ctl_name)

cmds.group(ctl_name, n=group_pos(ctl_name))
cmds.group(ctl_name, n=group_par(ctl_name))
cmds.group(ctl_name, n=f"{ctl_name}_rotkn")
cmds.group(ctl_name, n=f"{ctl_name}_rotfo")

poi_con_no = poi_con0_2(f'JNT_{side}_knee_loc', f'JNT_{side}_foot_loc', group_pos(ctl_name), 1)

ori_con_no = ori_con0(f'JNT_{side}_knee_loc', group_pos(ctl_name), 1)

cmds.delete(poi_con_no, ori_con_no)

poi_con0_2(f'JNT_{side}_knee_loc', f'JNT_{side}_foot_loc', group_par(ctl_name), 1)

cmds.aimConstraint(
    f'JNT_{side}_knee_loc',
    group_par(ctl_name),
    mo=True,
    weight=1,
    aimVector=(1, 0, 0),
    upVector=(0, -1, 0),
    worldUpType="vector",
    worldUpVector=(0, 1, 0)
)

## 조인트들의 위치를 항상 무릎과 발목 사이에 유지하기위해 leg_do_folliclejoint()_()_rb_par에 point constrain을 걸어주는 코드

def poi_con0_2(parent_1, parent_2, child, weight_1, weight_2):
    cmds.pointConstraint(parent_1, child, mo=False, weight=weight_1)
    cmds.pointConstraint(parent_2, child, mo=False, weight=weight_2)

def poi_con0_2_R(parent_2, parent_1, child, weight_1, weight_2):
    cmds.pointConstraint(parent_1, child, mo=False, weight=weight_1)
    cmds.pointConstraint(parent_2, child, mo=False, weight=weight_2)

def ori_con1(parent, child, weight):
    cmds.orientConstraint(parent, child, mo=True, weight=weight)

def par_con1(parent, child, weight):
    cmds.parentConstraint(parent, child, mo=True, weight=weight)

#왼쪽 작업
side = 'L'

cmds.select(cl=1)

# 포인트 컨스트레인 가중치 리스트
poi_weight = [
    (1, 0),
    (5, 1),
    (2, 1),
    (1, 1),
    (1, 2),
    (1, 5),
    (0, 1)
]

# 각 조인트들과 위치값을 맞춰줄 로케이터들 point constrain
for i, (weight_1, weight_2) in enumerate(poi_weight, start=1):
    poi_con0_2('JNT_{side}_knee_loc', 'JNT_{side}_foot_loc', f'leg_do_folliclejoint{i}_{side}_rb_par', weight_1, weight_2)

# 각 조인트들의 회전값을 맞춰줄 로케이터들 orient constrain
for i in range(1, 8):
    ori_con1('JNT_{side}_knee_loc', f'leg_do_folliclejoint{i}_{side}_rb_par', 1)

# 트위스트 컨트롤러와 조인트들 연결
par_weight = [0, 0, 0, 1, 0, 0, 0]

for i, weight in enumerate(par_weight, start=1):
    par_con1(ctl_name, f'leg_do_folliclejoint{i}_{side}_rb_con', weight)
